# Generated by Django 2.2.1 on 2019-10-04 08:15

from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_event', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_expense', models.CharField(max_length=200, verbose_name='название затраты')),
                ('lead_time', models.FloatField(blank=True, verbose_name='Время выпонения(ч)')),
                ('execution_costs', models.FloatField(blank=True, verbose_name='Затраты на выполнение этапа(тыс.руб.)')),
                ('critical_time', models.FloatField(blank=True, null=True, verbose_name='критическая цена')),
                ('critical_cost', models.FloatField(blank=True, null=True, verbose_name='критическая стоимость')),
                ('expected_value_time', models.FloatField(blank=True, null=True, verbose_name='Математическое ожидание времени')),
                ('expected_value_cost', models.FloatField(blank=True, null=True, verbose_name='Математическое ожидание стоимости')),
                ('standard_deviation_time', models.FloatField(blank=True, null=True, verbose_name='Среднеквадратическое отклонение времени')),
                ('standard_deviation_cost', models.FloatField(blank=True, null=True, verbose_name='Среднеквадратическое отклонение стоимости')),
                ('sigma_time', models.FloatField(blank=True, null=True, verbose_name='уровень сигма времени')),
                ('sigma_cost', models.FloatField(blank=True, null=True, verbose_name='уровень сигма стоимости')),
                ('probability_time', models.FloatField(blank=True, null=True, verbose_name='Вероятность выхода показателя процесса за критичское значение времени')),
                ('probability_cost', models.FloatField(blank=True, null=True, verbose_name='Вероятность выхода показателя процесса за критичское значение стоимости')),
            ],
            options={
                'verbose_name': 'Затраты',
                'verbose_name_plural': 'Затраты',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Group_process',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_group', models.CharField(max_length=100, verbose_name='Название группы')),
            ],
            options={
                'verbose_name': 'Группы',
                'verbose_name_plural': 'Группы',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('position', models.CharField(max_length=100)),
            ],
            managers=[
                ('objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Position',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(max_length=200, verbose_name='Должность')),
            ],
            options={
                'verbose_name': 'Должность',
                'verbose_name_plural': 'Должность',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Risk',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('direction', models.CharField(blank=True, max_length=200, null=True, verbose_name='Направление деятельбности')),
                ('name_risk', models.CharField(max_length=200, verbose_name='название риска')),
                ('description', models.TextField(verbose_name='описание')),
                ('owner', models.CharField(blank=True, max_length=200, null=True, verbose_name='Владелец')),
                ('probability', models.FloatField(blank=True, null=True, verbose_name='Вероятность реализации')),
                ('expected_value_time', models.FloatField(null=True, verbose_name='Математическое ожидание времени')),
                ('expected_value_cost', models.FloatField(null=True, verbose_name='Математическое ожидание стоимости')),
                ('standard_deviation_time', models.FloatField(null=True, verbose_name='Среднеквадратическое отклонение времени')),
                ('standard_deviation_cost', models.FloatField(null=True, verbose_name='Среднеквадратическое отклонение стоимости')),
                ('significance_risk_time', models.CharField(max_length=200, null=True, verbose_name='значимость риска для времени')),
                ('significance_risk_cost', models.CharField(max_length=200, null=True, verbose_name='значимость риска для стоимости')),
                ('expense', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='process.Expense', verbose_name='Название затраты')),
            ],
            options={
                'verbose_name': 'Риск',
                'verbose_name_plural': 'Риск',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit', models.CharField(max_length=50, verbose_name='Еденица измерения')),
            ],
            options={
                'verbose_name': 'Едениы измерения',
                'verbose_name_plural': 'Едениы измерения',
            },
        ),
        migrations.CreateModel(
            name='Scenario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description_scen', models.CharField(max_length=200, null=True, verbose_name='описание сценария')),
                ('probability_scen', models.FloatField(null=True, verbose_name='Вероятность реализации')),
                ('impact_time', models.FloatField(null=True, verbose_name='Влияние на время')),
                ('impact_cost', models.FloatField(null=True, verbose_name='Влияние на стоимсоть')),
                ('risk', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='process.Risk', verbose_name='Риск')),
            ],
            options={
                'verbose_name': 'Сценарий',
                'verbose_name_plural': 'Сценарий',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Process',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название процесса')),
                ('start_event', models.CharField(blank=True, max_length=200, null=True, verbose_name='стартовое событие')),
                ('owner', models.CharField(blank=True, max_length=200, null=True, verbose_name='владелец')),
                ('description', models.TextField(blank=True, null=True, verbose_name='описание')),
                ('inpt', models.FileField(blank=True, null=True, upload_to='', verbose_name='Вход')),
                ('outpt', models.FileField(blank=True, null=True, upload_to='', verbose_name='Выход')),
                ('resurce', models.CharField(blank=True, max_length=200, null=True, verbose_name='Ресурсы')),
                ('isystem', models.CharField(blank=True, max_length=200, null=True, verbose_name='И.Системы')),
                ('regulations', models.CharField(blank=True, max_length=200, null=True, verbose_name='Регламент')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='process.Group_process', verbose_name='Группа')),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='process.Process', verbose_name='Подпроцесс')),
            ],
            options={
                'verbose_name': 'Процесс',
                'verbose_name_plural': 'Процесс',
            },
        ),
        migrations.CreateModel(
            name='MemberProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('responsability', models.CharField(choices=[('не учавтвует', 'не участвует'), ('О', 'Ответственный'), ('И', 'Исполнитель'), ('К', 'консултант'), ('Н', 'наблюдатель')], max_length=20, verbose_name='Ответсвенность')),
                ('position', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='process.Position', verbose_name='Долнжость')),
                ('proces', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='process.Process', verbose_name='Процесс')),
            ],
            options={
                'verbose_name': 'матрица ответсвенности',
                'verbose_name_plural': 'матрица ответсвенности',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Indicator',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_indicator', models.CharField(max_length=200, verbose_name='Название показателя')),
                ('criterion_ind', models.IntegerField(verbose_name='Критерий результативности')),
                ('method', models.CharField(blank=True, max_length=200, null=True, verbose_name='Метод расчета')),
                ('name_process', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='process.Process', verbose_name='Процесс')),
                ('unit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='process.Unit', verbose_name='Единица измерения')),
            ],
            options={
                'verbose_name': 'Показатель',
                'verbose_name_plural': 'Показатель',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='expense',
            name='name_process',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='process.Process', verbose_name='Процесс'),
        ),
        migrations.CreateModel(
            name='EventModels',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('owner', models.CharField(max_length=150, verbose_name='Владелец')),
                ('number', models.IntegerField(verbose_name='Номер')),
                ('name_event', models.CharField(max_length=200, verbose_name='Название мероприятия')),
                ('description', models.TextField(verbose_name='Описание')),
                ('responsible_persons', models.CharField(max_length=200, verbose_name='Ответственное лицо')),
                ('periodicity', models.CharField(choices=[('р', 'разовое'), ('и', 'регулярное')], max_length=20, verbose_name='Переодичность')),
                ('critical_date', models.DateField(verbose_name='Срок выполнения')),
                ('priority', models.FloatField(blank=True, null=True, verbose_name='Приоритет')),
                ('name_risk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='process.Risk', verbose_name='Риск')),
            ],
            options={
                'verbose_name': 'Мероприятия',
                'verbose_name_plural': 'Мероприятия',
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
            ],
        ),
    ]
